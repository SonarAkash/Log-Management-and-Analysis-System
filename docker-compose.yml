
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: log-manager-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: ${TIMEZONE}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "apt-get update && apt-get install -y tzdata && docker-entrypoint.sh postgres"

  redis:
    image: redis:latest
    container_name: log-manager-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  log-service:
    build: .
    ports:
      - "10000:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILE}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - LOG_INGESTION_WAL_PATH=/app/data/wal/
      - SECURE_KEY=${LOG_MANAGER_SECURE_KEY}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=${REDIS_PORT}
      # SMTP Configuration
      - SPRING_MAIL_HOST=${SMTP_HOST}
      - SPRING_MAIL_PORT=${SMTP_PORT}
      - SPRING_MAIL_USERNAME=${SMTP_USERNAME}
      - SPRING_MAIL_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - ./target/wal:/app/data/wal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  k6:
    image: grafana/k6
    command: run /scripts/test.js
    volumes:
      - ./k6:/scripts
    environment:
      - API_TARGET=http://log-service:${APP_PORT}
      - API_TOKEN=${K6_API_TOKEN}
    depends_on:
      log-service:
        condition: service_healthy


# This defines the named volume used above, letting Docker manage it
volumes:
  postgres-data:
  redis-data: